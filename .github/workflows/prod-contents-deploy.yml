# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: ContentsService

on:
  push:
    branches: [ "prod-contents" ]
  pull_request:
    branches: [ "prod-contents" ]

jobs:
    build:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Clean Gradle Cache
        run: |
          cd BE-Contents-Server
          ls
          ./gradlew clean

      - name: Make application.yml
        run: |
          mkdir -p src/main/resources
          echo "$APPLICATION" > src/main/resources/application.yml
        env:
          APPLICATION: ${{ secrets.APPLICATION_CONTENTS }}

      - name: Grant execute permission for gradlew
        run: |
          cd BE-Contents-Server
          ls
          chmod +x gradlew

      - name: Build with Gradle
        run:  |
          cd BE-Contents-Server
          ls
          ./gradlew build -x test

      - name: Docker build
        run: |
          cd BE-Contents-Server
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t app .
          docker tag app ${{ secrets.DOCKER_USERNAME }}/contents:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/contents:latest

      - name: docker-compose.yml 
        uses: appleboy/scp-action@master
        with:
            username: ec2-user
            host: ${{ secrets.HOST_PROD_2 }}
            key: ${{ secrets.PRIVATE_KEY_CONTENTS }}
            port: ${{ secrets.PORT }}
            source: "./BE-Contents-Server/docker-compose-contents.yml"
            target: "/home/ec2-user/"

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD_2 }} 
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY_CONTENTS }} 
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/contents:latest
            docker image prune -a -f
            cd ./BE-Contents-Server
            docker-compose -f docker-compose-contents.yml up -d
